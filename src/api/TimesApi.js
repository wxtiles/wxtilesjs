/**
 * WXTiles
 * Make and explore beautiful, rapidly-refreshed weather maps with the WXTiles API
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Times', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Times'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.WxTiles) {
      root.WxTiles = {};
    }
    root.WxTiles.TimesApi = factory(root.WxTiles.ApiClient, root.WxTiles.Times, root.WxTiles.Error);
  }
}(this, function(ApiClient, Times, Error) {
  'use strict';

  /**
   * Times service.
   * @module api/TimesApi
   * @version 3.0.0
   */

  /**
   * Constructs a new TimesApi. 
   * @alias module:api/TimesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getTimes operation.
     * @callback module:api/TimesApi~getTimesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Times} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection of moments in time for which data exists and can be requested (as tiles) for an instance of a layer.
     * This endpoint exposes the array of moments that data exists for a particular instance. Each element can be used to substitute the &lt;time&gt; part of a tile URL. Not all layer instances have a temporal dimension (e.g. it may be static bathymetry, or an observational dataset with no forecast or hindcast). If a layer has no temporal dimension, the array will be empty. The times in the array may not be unique (this is almost always due to grouped datasets containing overlapping time steps).
     * @param {String} ownerId The owner of the dataset.
     * @param {String} layerId The id of the layer.
     * @param {String} instanceId The id of the instance.
     * @param {module:api/TimesApi~getTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Times}
     */
    this.getTimes = function(ownerId, layerId, instanceId, callback) {
      var postBody = null;

      // verify the required parameter 'ownerId' is set
      if (ownerId == undefined || ownerId == null) {
        throw "Missing the required parameter 'ownerId' when calling getTimes";
      }

      // verify the required parameter 'layerId' is set
      if (layerId == undefined || layerId == null) {
        throw "Missing the required parameter 'layerId' when calling getTimes";
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling getTimes";
      }


      var pathParams = {
        'ownerId': ownerId,
        'layerId': layerId,
        'instanceId': instanceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyQuery', 'apiKeyHeader'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Times;

      return this.apiClient.callApi(
        '/{ownerId}/layer/{layerId}/instance/{instanceId}/times/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
