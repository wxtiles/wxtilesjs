/**
 * WXTiles
 * Make and explore beautiful, rapidly-refreshed weather maps with the WXTiles API
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.WxTiles) {
      root.WxTiles = {};
    }
    root.WxTiles.StylesApi = factory(root.WxTiles.ApiClient, root.WxTiles.Error);
  }
}(this, function(ApiClient, Error) {
  'use strict';

  /**
   * Styles service.
   * @module api/StylesApi
   * @version 3.0.0
   */

  /**
   * Constructs a new StylesApi. 
   * @alias module:api/StylesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getJSONLegend operation.
     * @callback module:api/StylesApi~getJSONLegendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * JSON represention of a style as implemented by a particular layer. Can be used for rendering custom a legend.
     * Unlike image legends, the JSON representation of a style always exists.
     * @param {String} ownerId The owner of the dataset.
     * @param {String} layerId The id of the layer.
     * @param {String} styleId The id of the style.
     * @param {module:api/StylesApi~getJSONLegendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getJSONLegend = function(ownerId, layerId, styleId, callback) {
      var postBody = null;

      // verify the required parameter 'ownerId' is set
      if (ownerId == undefined || ownerId == null) {
        throw "Missing the required parameter 'ownerId' when calling getJSONLegend";
      }

      // verify the required parameter 'layerId' is set
      if (layerId == undefined || layerId == null) {
        throw "Missing the required parameter 'layerId' when calling getJSONLegend";
      }

      // verify the required parameter 'styleId' is set
      if (styleId == undefined || styleId == null) {
        throw "Missing the required parameter 'styleId' when calling getJSONLegend";
      }


      var pathParams = {
        'ownerId': ownerId,
        'layerId': layerId,
        'styleId': styleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyQuery', 'apiKeyHeader'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{ownerID}/legend/{layerId}/{styleId}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPNGLegend operation.
     * @callback module:api/StylesApi~getPNGLegendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A legend for PNG map tiles
     * Available legends reflect the styles implemented by a layer. When a legend is disabled on a per-style basis (or if a legend cannot be rendered due to the style), then this endpoint will return a 204 No Content response. The size must be substituted by either &#x60;small&#x60; or &#x60;large&#x60;. The orientation must be substituted by either &#x60;horizontal&#x60; or &#x60;vertical&#x60;.
     * @param {String} ownerId The owner of the dataset.
     * @param {String} layerId The id of the layer.
     * @param {String} styleId The id of the style.
     * @param {module:model/String} size The size.
     * @param {module:model/String} orientation The orientation.
     * @param {module:api/StylesApi~getPNGLegendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getPNGLegend = function(ownerId, layerId, styleId, size, orientation, callback) {
      var postBody = null;

      // verify the required parameter 'ownerId' is set
      if (ownerId == undefined || ownerId == null) {
        throw "Missing the required parameter 'ownerId' when calling getPNGLegend";
      }

      // verify the required parameter 'layerId' is set
      if (layerId == undefined || layerId == null) {
        throw "Missing the required parameter 'layerId' when calling getPNGLegend";
      }

      // verify the required parameter 'styleId' is set
      if (styleId == undefined || styleId == null) {
        throw "Missing the required parameter 'styleId' when calling getPNGLegend";
      }

      // verify the required parameter 'size' is set
      if (size == undefined || size == null) {
        throw "Missing the required parameter 'size' when calling getPNGLegend";
      }

      // verify the required parameter 'orientation' is set
      if (orientation == undefined || orientation == null) {
        throw "Missing the required parameter 'orientation' when calling getPNGLegend";
      }


      var pathParams = {
        'ownerId': ownerId,
        'layerId': layerId,
        'styleId': styleId,
        'size': size,
        'orientation': orientation
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apiKeyQuery', 'apiKeyHeader'];
      var contentTypes = [];
      var accepts = ['image/png'];
      var returnType = null;

      return this.apiClient.callApi(
        '/{ownerId}/legend/{layerId}/{styleId}/{size}/{orientation}.png', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
